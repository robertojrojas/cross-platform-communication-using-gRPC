Cross-Platform Communication Using gRPC
GoLang Philly Meetup
11 Apr 2017
Tags: golangphilly, golang, docker

Roberto Rojas
Chariot Solutions
robertojrojas@gmail.com
@robertojrojas

https://github.com/GoLangPhilly/presentations/201704/cross-platform-communication-using-gRPC


* About Me

- 20 years as Software Developer
- mainly working on backend services *nix for environments
- Java, NodeJS, Python, and C/C++
- 2 years with Go


* Agenda

- Overview
- Why gRPC
- Up and Running with gRPC
- Write the gRPC Service
- Generate the gRPC Server/Client
- Demos
- Resources
- Thank you


* Overview
gRPC is a high performance, open-source universal RPC framework.

Google created gRPC from Stubby (internal cross-platform, scalable technology)

Supported Languages

    C++, Java, Objective-C, Python, Ruby, Go, C#, Node.js.
    Java implementation supports Android and Objective-C is targeted at iOS.

Options for Interservice Communications

- REST is based on resources. You structure calls as HTTP calls against resources.

- RPC is based on actions. You structure calls as function calls.


* Why gRPC?

- Cross language support
- Scalable
- Streaming
- binary protocol using Protocol Buffers
- Extensible
- Load balancing
- The framework is layered, isolated from transport protocol
- Strongly Typed Messaging
- Fast and Efficient (gRPC site contains some benchmarks)
- Cascading call-cancellation

* Up and Running with gRPC

- Install the Protocal Buffer v3 Compiler
  `https://github.com/google/protobuf/releases`

- Get the following packages
   `go get google.golang.org/grpc`
   `go get -u github.com/golang/protobuf/{proto,protoc-gen-go}`

- Write the gRPC Service

- Generate the gRPC Server/Client

* Write the gRPC Service

   syntax = "proto3";
   option go_package = "docker/service";
   message Container {
     string id     = 1;
     ...
   }
   message GetAllContainersRequest {}
   message ContainerCatalog {
     repeated Container containers = 1;
   }
   ...
   message ContainerStats {
      string container        = 1;
      enum MemorySize {
        B  = 0;
       ....
        YB = 8;
      }
      MemorySize memory_size_type = 5;
   }
   service DockerService {
     rpc GetAllContainers(GetAllContainersRequest) returns (ContainerCatalog) {}
     rpc GetContainerStats(ContainerStatsRequest) returns (stream ContainerStats) {}
   }


* Generate the gRPC Server/Client

- Get gPRC Plugin - be installed in $GOBIN defaulting to $GOPATH/bin
   go get -u github.com/golang/protobuf/protoc-gen-go

- Generate Sources
   protoc -I ./pb ./pb/docker/service.proto --go_out=plugins=grpc:.


* Demos

- Go File Transfer to Java File Server

- Node.js Client to Go Docker Service


* Resources

   http://www.grpc.io/
   
   https://github.com/grpc/grpc-go/tree/master/examples

   https://developers.google.com/protocol-buffers/docs/reference/go-generated

   https://app.pluralsight.com/library/courses/grpc-enhancing-application-communication

   https://app.pluralsight.com/library/courses/protocol-buffers-beyond-json-xml

